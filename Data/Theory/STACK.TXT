    Стек представляет собой линейный список данных, доступ к которому
осуществляется по принципу "последний вошел, первый вышел" (иногда
сокращенно его называют методом доступа LIFO(Last In, First Out)).
Этот способ является единственным при добавлении элементов в стек и
при выборке элементов из стека. Применение стека не позволяет делать
прямой доступ к любому конкретному элементу. При выполнении процедуры
выборки из очереди из нее удаляется первый элемент, который является
результатом выполнения данной процедуры. Следует помнить, что при
выборке из стека из него действительно удаляется один элемент.
Если этот элемент нигде не будет сохранен, то в последствии к нему
нельзя будет осуществить доступ.
    Для формирования стека и работы с ним необходимо иметь  две  переменные
типа указатель, первая из которых определяет вершину стека, а вторая -
вспомогательная.
    Элемент стека :
      type

        PList = ^TList; { указатель в оносвязном списке }   

        TList = record { элемент односвязного списка }
     
                 Data : DataType; { информационная часть }     

                 Next : PList; { указатель на следующй элемент }     

               end;

    Для реализации стека можно так же использовать другие типы списков
(двусвязные, циклические и т.д.), массивы, типизированные файлы.
    Исторически сложилось так, что две основные операции для стека - поместить в
стек и выбрать из стека - получили название соответственно "затолкнуть" и
"вытолкнуть". Поэтому для реализации стека необходимо создать две функции: 
"push" (затолкнуть), которая помещает элемент в вершину стека, и 
"pop" (вытолкнуть), которая выбирает из вершины стека значение.
    Многие исследователи независимо пришли к выводу о важности стеков и
очередей, а потому присвоили им иные собственные имена. Так стеки часто называют
магазинными списками (push-down lists), реверсивными хранилищами (reversion
storages), магазинами (cellars), вложенными хранилищами (nesting stores), кучами
(piles), дисциплинами обслуживания в обратном порядке (last-in-first-out lists- 
LIFO lists) и даже флюгерными списками (yo-yo lists).
    Использование динамических величин предоставляет программисту ряд дополни
тельных возможностей. Во-первых, подключение динамической памяти позволяет
увеличить объем обрабатываемых данных. Во-вторых, если потребность в каких-то
данных отпала до окончания программы, то занятую ими память можно освободить 
для другой информации. В-третьих, использование динамической памяти позволяет
создавать структуры данных переменного размера.