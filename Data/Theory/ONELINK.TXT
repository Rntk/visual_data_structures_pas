    Односвязным(однонаправленным) списком называется структура данных,
каждый элемент которой, посредством указателя, связан со следующим
элементом. Во главе списка(самый первый элемент) находится указатель,
который часто называют "корнем" или "головой", который указывает на
первую запись в списке.
    Связный (линейный) список является структурой данных, в произвольно
выбранное место которой могут включаться данные, а также изыматься оттуда.
Каждая компонента списка определяется ключом. Обычно ключ - либо число,
либо строка символов. Ключ располагается в поле данных компоненты, он
может занимать как отдельное поле записи, так и быть частью поля записи.
    Для формирования односвязного списка и работы с ним необходимо иметь
пять переменных типа указатель, первая из которых определяет начало списка,
вторая - конец списка, остальные вспомогательные.
    Элемент односвязного списка :
      type

        PList = ^TList; { указатель в оносвязном списке }   

        TList = record { элемент односвязного списка }
     
                 Data : DataType; { информационная часть }     

                 Next : PList; { указатель на следующй элемент }     

               end;

    Связанные списки используются в двух основных случаях. Во-первых, при 
создании массивов, которые располагаются в оперативной памяти и размер которых
заранее неизвестен. Если вы заранее знаете, какого размера память потребуется
для решения вашей задачи, то вы можете использовать простой массив. Однако, 
если действительный размер списка вам неизвестен, то вы должны применить 
связанный список. Во-вторых, связанные списки используются в базах данных на
дисках. Связанный список позволяет быстро выполнять вставку и удаление элемента
данных без реорганизации всего дискового файла. По этим причинам связанные 
списки широко используются в программах по управлению базами данных.
    Использование динамических величин предоставляет программисту ряд дополни
тельных возможностей. Во-первых, подключение динамической памяти позволяет
увеличить объем обрабатываемых данных. Во-вторых, если потребность в каких-то
данных отпала до окончания программы, то занятую ими память можно освободить 
для другой информации. В-третьих, использование динамической памяти позволяет
создавать структуры данных переменного размера.