    Очередь представляет собой линейный список данных, доступ к которому
осуществляется по принципу "первый вошел, первый вышел" (иногда сокращенно
его называют методом доступа FIFO(First In, First Out)). Этот способ
является единственным при постановке элементов в очередь и при поиске элементов
в очереди. Применение очереди не позволяет делать прямой доступ к любому
конкретному элементу. При выполнении процедуры постановки в очередь элемент
помещается в конец очереди. При выполнении процедуры выборки из очереди из
нее удаляется первый элемент, который является результатом выполнения данной
процедуры. Следует помнить, что при выборке из очереди из нее действительно
удаляется один элемент. Если этот элемент нигде не будет сохранен, то в
последствии к нему нельзя будет осуществить доступ.
    Для формирования очереди и работы с ней необходимо иметь три переменных
типа указатель, первая из которых определяет начало  списка, вторая -
конец списка, а третья - вспомогательная.
    Элемент очереди :
      type

        PList = ^TList; { указатель в оносвязном списке }   

        TList = record { элемент односвязного списка }
     
                 Data : DataType; { информационная часть }     

                 Next : PList; { указатель на следующй элемент }     

               end;

    Для реализации стека можно так же использовать другие типы списков
(двусвязные, циклические и т.д.), массивы, типизированные файлы.
   Многие исследователи независимо пришли к выводу о важности стеков и
очередей, а потому присвоили им иные собственные имена. Так очереди часто 
называют циклическими хранилищами (circular stores) или  дисциплинами 
обслуживания в порядке поступления (first-in-first-out-FIFO lists).
    Использование динамических величин предоставляет программисту ряд дополни
тельных возможностей. Во-первых, подключение динамической памяти позволяет
увеличить объем обрабатываемых данных. Во-вторых, если потребность в каких-то
данных отпала до окончания программы, то занятую ими память можно освободить 
для другой информации. В-третьих, использование динамической памяти позволяет
создавать структуры данных переменного размера.